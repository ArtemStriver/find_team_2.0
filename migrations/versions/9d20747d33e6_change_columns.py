"""change_columns

Revision ID: 9d20747d33e6
Revises: d20de73fea23
Create Date: 2024-03-30 11:24:08.064154

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "9d20747d33e6"
down_revision: Union[str, None] = "d20de73fea23"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "user_contact",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("email", sa.String(length=200), nullable=False),
        sa.Column("vk", sa.String(length=200), nullable=True),
        sa.Column("telegram", sa.String(length=200), nullable=True),
        sa.Column("discord", sa.String(length=200), nullable=True),
        sa.Column("other", sa.String(length=200), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"], ["auth_user.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id"),
    )
    op.create_table(
        "user_hobbies",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("lifestyle1", sa.String(length=60), nullable=True),
        sa.Column("lifestyle2", sa.String(length=60), nullable=True),
        sa.Column("lifestyle3", sa.String(length=60), nullable=True),
        sa.Column("sport1", sa.String(length=60), nullable=True),
        sa.Column("sport2", sa.String(length=60), nullable=True),
        sa.Column("sport3", sa.String(length=60), nullable=True),
        sa.Column("work1", sa.String(length=60), nullable=True),
        sa.Column("work2", sa.String(length=60), nullable=True),
        sa.Column("work3", sa.String(length=60), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"], ["auth_user.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id"),
    )
    op.create_table(
        "team_tags",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("team_id", sa.Uuid(), nullable=False),
        sa.Column("tag1", sa.String(length=50), nullable=True),
        sa.Column("tag2", sa.String(length=50), nullable=True),
        sa.Column("tag3", sa.String(length=50), nullable=True),
        sa.Column("tag4", sa.String(length=50), nullable=True),
        sa.Column("tag5", sa.String(length=50), nullable=True),
        sa.Column("tag6", sa.String(length=50), nullable=True),
        sa.Column("tag7", sa.String(length=50), nullable=True),
        sa.ForeignKeyConstraint(["team_id"], ["team.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("team_id"),
    )
    op.drop_constraint(
        "application_to_join_team_id_fkey",
        "application_to_join",
        type_="foreignkey",
    )
    op.drop_constraint(
        "application_to_join_user_id_fkey",
        "application_to_join",
        type_="foreignkey",
    )
    op.create_foreign_key(
        None,
        "application_to_join",
        "team",
        ["team_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        None,
        "application_to_join",
        "auth_user",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.alter_column(
        "team",
        "team_deadline_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.Date(),
        existing_nullable=False,
    )
    op.drop_column("team", "team_tags")
    op.drop_column("team", "team_contacts")
    op.drop_constraint(
        "team_members_user_id_fkey", "team_members", type_="foreignkey"
    )
    op.drop_constraint(
        "team_members_team_id_fkey", "team_members", type_="foreignkey"
    )
    op.create_foreign_key(
        None,
        "team_members",
        "auth_user",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        None, "team_members", "team", ["team_id"], ["id"], ondelete="CASCADE"
    )
    op.drop_column("user_profile", "contacts")
    op.drop_column("user_profile", "hobbies")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "user_profile",
        sa.Column(
            "hobbies",
            sa.VARCHAR(length=50),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "user_profile",
        sa.Column(
            "contacts", sa.VARCHAR(), autoincrement=False, nullable=False
        ),
    )
    op.drop_constraint(None, "team_members", type_="foreignkey")
    op.drop_constraint(None, "team_members", type_="foreignkey")
    op.create_foreign_key(
        "team_members_team_id_fkey",
        "team_members",
        "team",
        ["team_id"],
        ["id"],
    )
    op.create_foreign_key(
        "team_members_user_id_fkey",
        "team_members",
        "auth_user",
        ["user_id"],
        ["id"],
    )
    op.add_column(
        "team",
        sa.Column(
            "team_contacts", sa.VARCHAR(), autoincrement=False, nullable=False
        ),
    )
    op.add_column(
        "team",
        sa.Column(
            "team_tags", sa.VARCHAR(), autoincrement=False, nullable=True
        ),
    )
    op.alter_column(
        "team",
        "team_deadline_at",
        existing_type=sa.Date(),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
    )
    op.drop_constraint(None, "application_to_join", type_="foreignkey")
    op.drop_constraint(None, "application_to_join", type_="foreignkey")
    op.create_foreign_key(
        "application_to_join_user_id_fkey",
        "application_to_join",
        "auth_user",
        ["user_id"],
        ["id"],
    )
    op.create_foreign_key(
        "application_to_join_team_id_fkey",
        "application_to_join",
        "team",
        ["team_id"],
        ["id"],
    )
    op.drop_table("team_tags")
    op.drop_table("user_hobbies")
    op.drop_table("user_contact")
    # ### end Alembic commands ###
